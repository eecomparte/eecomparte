
Solicitar	POST /eureka-ccr/listado-modulos-por-rol HTTP/1.1

{"LISTAOUTPERMISSIONMODULE":[{"ID_ROLE":"ROLE_IT","ID_MODULE":"CCR","PERMISSION_LEVEL":2,"MODULE_NAME":"CCR","DESCRIPTION":"Counterparty and Country Risk","MODULE_URL":"http://es5dx02bsab.bancsabadell.com:8880/ccr/appccr/"},{"ID_ROLE":"ROLE_IT","ID_MODULE":"GARAN","PERMISSION_LEVEL":2,"MODULE_NAME":"GARANTIAS","DESCRIPTION":"Terminal de Garantias","MODULE_URL":"http://es5dx02bsab.bancsabadell.com:8880/ccr/garantias/"},{"ID_ROLE":"ROLE_IT","ID_MODULE":"MICRO","PERMISSION_LEVEL":2,"MODULE_NAME":"MICRO","DESCRIPTION":"Counterparty and Credit Risk","MODULE_URL":"http://es5dx02bsab.bancsabadell.com:8880/ccr/micro/"},{"ID_ROLE":"ROLE_IT","ID_MODULE":"RBP","PERMISSION_LEVEL":2,"MODULE_NAME":"RBP","DESCRIPTION":"Riesgo Banco Pais","MODULE_URL":"http://es5dx02bsab.bancsabadell.com:8880/ccr/rbp/"}]}


Clave	Valor
Solicitar	POST /eureka-ccr/listadatospermissionscreen HTTP/1.1

{"LISTAOUTPERMISSIONSCREENTREE":[{"ID_SCREEN":"DATOS_MERCADO","FATHER_SCREEN":null,"SCREEN_NNAME":"Datos de Mercado","MENU_ORDER":1,"PERM_LEVEL_USER_SCREEN":2,"LEVEL":1},{"ID_SCREEN":"POC_GAR","FATHER_SCREEN":null,"SCREEN_NNAME":"POC Garantias","MENU_ORDER":2,"PERM_LEVEL_USER_SCREEN":2,"LEVEL":1},{"ID_SCREEN":"POC_GAR_DETALL","FATHER_SCREEN":"POC_GAR","SCREEN_NNAME":"POC Detalle Garantias","MENU_ORDER":1,"PERM_LEVEL_USER_SCREEN":2,"LEVEL":2},{"ID_SCREEN":"TIPOS_CAMBIO","FATHER_SCREEN":"DATOS_MERCADO","SCREEN_NNAME":"Tipos de Cambio","MENU_ORDER":1,"PERM_LEVEL_USER_SCREEN":2,"LEVEL":2}]}


create or replace PACKAGE BODY           "CCR_PACKAGE" IS
/*
PROCEDURE insPrueba
AS
BEGIN
    -- return (select json_object('description' is description) from ccr_conf_screen)
    insert into PRUEBA values('VALOR0');
    COMMIT;
END insPrueba;

*/

procedure pruebas(salida_cursor out sys_refcursor,salida_varchar out varchar2)
as
queryString varchar2(200);
begin
  salida_varchar:='SALIDA';
  queryString:='select * from dual';
  open salida_cursor for queryString;

end pruebas;



PROCEDURE getConfig(salida out sys_refcursor)
AS
queryString varchar2(200);
BEGIN
    -- return (select json_object('description' is description) from ccr_conf_screen)
    queryString:='select cs.id_screen,cs.father_screen,cs.description,ct.id_tab,ct.tab_order,ct.tab_title 
    from ccr_conf_screen cs 
    inner join ccr_conf_tab ct on cs.id_screen = ct.id_screen';

    open salida for 
      queryString;
END getConfig;


PROCEDURE getCampos(salida out sys_refcursor)
AS
queryString varchar2(500);
BEGIN
    queryString:='SELECT F.ID_FIELD_NAME, F.ID_TAB, F.ID_SCREEN, F.FILTER_ORDER, F.FILTER_TYPE, F.IS_FROM_TO, T.FIELD_TEXT 
                                     FROM CCR_CONF_TAB_FILTER F 
                                     LEFT JOIN CCR_CONF_FIELD_TEXT T 
                                     ON T.ID_FIELD_NAME = F.ID_FIELD_NAME';
    open salida for 
      queryString;
END getCampos;


PROCEDURE getAlerts(salida out sys_refcursor,inicio in number default 0 ,fin in number default 1000)
as
ultimoElemento number;
queryString varchar2(200);
BEGIN
    queryString:='select * from (select a.*,row_number() over(order by alert_id) rn from alerts a ) where rn '||' between '||inicio ||' and '|| fin;
    --return (select json_object('description' is description) from ccr_conf_screen)
    -- queryString:='select * from (select a.*,row_number() over(order by alert_id) rn from alerts a ) where rn'||' between 1 and 300';
    open salida for 
      queryString;
END getAlerts;



/*PROCEDURE getConfigJson
IS 
BEGIN
    -- return (select json_object('description' is description) from ccr_conf_screen)
    select JSON_ARRAY(JSON_OBJECT('NOMBRE' value p.nombre)) AS jso from prueba p;
END getConfigJson;*/

PROCEDURE getListaTiposCambio(salida out sys_refcursor,inicio in number default 1 ,fin in number default 150, p_processdate in varchar2 DEFAULT null, 
                            p_identidad in varchar2 DEFAULT null, p_idbasecurrency in varchar2 DEFAULT null)
as
--ultimoElemento number;
  primero number;
  ultimo number;
queryString varchar2(4000);
filtro varchar2(4000);

BEGIN
    --ultimoElemento:=pagina*tamPagina;
  
    filtro:= 'where';
    if p_processdate is not null then
      filtro:= filtro || ' TO_DATE(TO_CHAR(PROCESS_DATE,''DD/MM/YYYY''),''DD/MM/YYYY'') = '||'TO_DATE('''|| p_processdate||''',''DD/MM/YYYY'')  and';
    end if;
    if p_identidad is not null then
      filtro:= filtro || ' ID_ENTITY = '''||p_identidad||'''  and';
    end if;
    if p_idbasecurrency is not null then
      filtro:= filtro || ' ID_BASE_CURRENCY = '''||p_idbasecurrency ||'''  and';
    end if;
    if LENGTH(filtro)=5 then
      filtro:='';
    else
      filtro:= SUBSTR(filtro,1,LENGTH(filtro)-3);
    end if;
    if inicio is null then
      primero:=1;
    else 
      primero:= inicio;
    end if;
    if fin is null then
      ultimo:= 150;
    else
      ultimo:= fin;
    end if;
   -- queryString:='select * from (select a.*,row_number() over(order by ID_ENTITY) rn from (select * from (SELECT ID_ENTITY, ID_BASE_CURRENCY, ID_QUOTE_CURRENCY, EXCHANGE_NAME, PROCESS_DATE, REAL_RATE 
   --               FROM BDD_CCR.CCR_HIST_CURRENCY_EXCH_RATE) '||filtro ||') a)where rn between '||ultimoElemento||' and '||ultimoElemento||'+ 150';
    
   /* queryString:='select ROWNUM, a.* from (SELECT ROWNUM rn,ID_ENTITY, ID_BASE_CURRENCY, ID_QUOTE_CURRENCY, EXCHANGE_NAME, PROCESS_DATE, REAL_RATE 
                  FROM BDD_CCR.CCR_HIST_CURRENCY_EXCH_RATE '||filtro ||') a 
                  where rn between '||primero||' and '||ultimo||'';
   */
   /* QUERY ORIGINAL LA COMENTO PARA HACER PRUEBAS 
   queryString:='select ID_ENTITY, ID_BASE_CURRENCY, ID_QUOTE_CURRENCY, EXCHANGE_NAME, PROCESS_DATE, REAL_RATE from (SELECT ROWNUM rn,ID_ENTITY, ID_BASE_CURRENCY, ID_QUOTE_CURRENCY, EXCHANGE_NAME, PROCESS_DATE, REAL_RATE 
                  FROM BDD_CCR.CCR_HIST_CURRENCY_EXCH_RATE '||filtro ||') a 
                  where rn between '||primero||' and '||ultimo||''; */
    queryString:='select ID_ENTITY, ID_BASE_CURRENCY, ID_QUOTE_CURRENCY, EXCHANGE_NAME, PROCESS_DATE, REAL_RATE, 
                  ID_ENTITY AS ID_ENTITY_2, ID_BASE_CURRENCY AS ID_BASE_CURRENCY_2, ID_QUOTE_CURRENCY AS ID_QUOTE_CURRENCY_2, EXCHANGE_NAME AS EXCHANGE_NAME_2, 
                  PROCESS_DATE AS PROCESS_DATE_2, REAL_RATE AS REAL_RATE_2,  
                   ID_ENTITY AS ID_ENTITY_3, ID_BASE_CURRENCY AS ID_BASE_CURRENCY_3, ID_QUOTE_CURRENCY AS ID_QUOTE_CURRENCY_3, EXCHANGE_NAME AS EXCHANGE_NAME_3, 
                  PROCESS_DATE AS PROCESS_DATE_3, REAL_RATE AS REAL_RATE_3 
                  from (SELECT ROWNUM rn,ID_ENTITY, ID_BASE_CURRENCY, ID_QUOTE_CURRENCY, EXCHANGE_NAME, PROCESS_DATE, REAL_RATE 
                  FROM BDD_CCR.CCR_HIST_CURRENCY_EXCH_RATE '||filtro ||') a 
                  where rn between '||primero||' and '||ultimo||''; 
    
    open salida for 
      queryString;
END getListaTiposCambio;

PROCEDURE getDatosConfigFilter(listaConfigFilter out sys_refcursor, idTab in varchar2 DEFAULT null, idScreen in varchar2 DEFAULT null)
as

queryString varchar2(4000);


BEGIN
    
    queryString:='SELECT F.ID_FIELD_NAME name , F.FILTER_ORDER , F.FILTER_TYPE type, T.FIELD_TEXT placeholer, F.IS_FROM_TO, '''' as  options, F.DEF_DAY_RANGE FROM BDD_CCR.CCR_CONF_TAB_FILTER F 
                  LEFT JOIN BDD_CCR.CCR_CONF_FIELD_TEXT T ON T.ID_FIELD_NAME = F.ID_FIELD_NAME 
                  WHERE ID_TAB = '''||idTab ||''' AND ID_SCREEN = '''||idScreen ||''' ORDER BY F.FILTER_ORDER';
    
    open listaConfigFilter for 
      queryString;
END getDatosConfigFilter;


PROCEDURE getListaModulos(listaOutPermissionModule out sys_refcursor, idUser in varchar2 DEFAULT null)
as

queryString varchar2(4000);


BEGIN
    
    queryString:='SELECT PM.ID_ROLE,PM.ID_MODULE,PM.PERMISSION_LEVEL, M.MODULE_NAME, M.DESCRIPTION, M.MODULE_URL FROM CCR_CONF_PERMISSION_MODULE PM 
                  LEFT JOIN CCR_CONF_USER U ON PM.ID_ROLE= U.ROLE
                  LEFT JOIN CCR_CONF_MODULE M ON PM.ID_MODULE = M.ID_MODULE
                  
                  WHERE UPPER(U.ID_USER) = UPPER('''||idUser||''')';
    
    open listaOutPermissionModule for queryString;
END getListaModulos;


PROCEDURE getListaModulosApp(listaOutPermissionModule out sys_refcursor, idUser in varchar2 DEFAULT null,idApp varchar2)
as

queryString varchar2(4000);


BEGIN
    
    queryString:='SELECT PM.ID_ROLE,PM.ID_MODULE,PM.PERMISSION_LEVEL, M.MODULE_NAME, M.DESCRIPTION, M.MODULE_URL FROM CCR_CONF_PERMISSION_MODULE PM 
                  LEFT JOIN CCR_CONF_USER U ON PM.ID_ROLE= U.ROLE
                  LEFT JOIN CCR_CONF_MODULE M ON PM.ID_MODULE = M.ID_MODULE
                  
                  WHERE UPPER(U.ID_USER) = UPPER('''||idUser||''') AND MODULE_NAME='''||idApp||'''';
    
    open listaOutPermissionModule for queryString;
END getListaModulosApp;



/*
procedure getListTabByScreen(listaTab out sys_refcursor, idScreen in varchar2 DEFAULT null)
as

queryString varchar2(500);


BEGIN
    
    queryString:='SELECT ID_TAB, ID_SCREEN, TAB_ORDER, TAB_TITLE, TAB_TYPE, IS_UPDATE, IS_DELETE, IS_INSERT FROM CCR_CONF_TAB WHERE ID_SCREEN = '''||idScreen||''' ORDER BY TAB_ORDER';

    open listaTab for 
      queryString;
END getListTabByScreen;
*/

  procedure getListTabByScreen(listaTab out sys_refcursor, idScreen in varchar2 DEFAULT null, idUser in varchar2)
as

queryString varchar2(500);


BEGIN
    
    --queryString:='SELECT ID_TAB, ID_SCREEN, TAB_ORDER, TAB_TITLE, TAB_TYPE, IS_UPDATE, IS_DELETE, IS_INSERT FROM CCR_CONF_TAB WHERE ID_SCREEN = '''||idScreen||''' ORDER BY TAB_ORDER';
    queryString:= 'SELECT T.ID_TAB, T.ID_SCREEN, T.TAB_ORDER, T.TAB_TITLE, T.TAB_TYPE, T.IS_UPDATE, T.IS_DELETE, T.IS_INSERT, P.PERMISSION_LEVEL FROM CCR_CONF_TAB T 
                    LEFT JOIN CCR_CONF_PERMISSION_SCREEN P ON T.ID_SCREEN = P.ID_SCREEN
                    LEFT JOIN CCR_CONF_USER U ON U.ROLE=P.ID_ROLE
                    WHERE UPPER(T.ID_SCREEN) = UPPER('''||idScreen||''')  AND  UPPER(U.ID_USER)= UPPER('''||idUser||''')
                    ORDER BY T.TAB_ORDER';
    open listaTab for 
      queryString;
END getListTabByScreen;


-- Obtiene Query por Pantala y Tab


procedure getListPermissionScreen(listaOutPermissionScreenTree out sys_refcursor, idUser in varchar2 DEFAULT null, idModule in varchar2 DEFAULT null)
as

queryString varchar2(2000);


BEGIN
    
    queryString:='SELECT ID_SCREEN, FATHER_SCREEN, SCREEN_NNAME,MENU_ORDER,PERM_LEVEL_USER_SCREEN, LEVEL FROM (SELECT ID_SCREEN,FATHER_SCREEN, SCREEN_NNAME,MENU_ORDER,PERM_LEVEL_USER_SCREEN       FROM CCR_V_SCREEN_LIST_ROLE_MODULE V 
                  LEFT JOIN CCR_CONF_USER U ON V.ID_ROLE= U.ROLE 
                  WHERE UPPER(U.ID_USER) = UPPER('''||idUser||''') AND V.ID_MODULE = '''||idModule||''') 
                          CONNECT BY 
                          PRIOR ID_SCREEN=FATHER_SCREEN 
                          START WITH 
                          FATHER_SCREEN IS NULL
                          ORDER BY LEVEL, MENU_ORDER';
    
    
    open listaOutPermissionScreenTree for 
      queryString;
END getListPermissionScreen;




procedure getListadoCompleto(datos out sys_refcursor, consulta out varchar2, jsonData in clob)
AS

c_datos   sys_refcursor;
count_datos sys_refcursor;
select_str constant varchar2(6) := 'SELECT';
campo varchar2(100);
filtroJson varchar2(100);
idScreen varchar2(100);
idTab varchar2(100);
filtro varchar2(4000);
inicio number;
fin number;
cantItems number;
queryDatos varchar2(4000);
queryDatosTotal varchar2(4000);
queryCountDatosSinPag varchar2(4000);
queryFiltros varchar2(4000);
--query_consulta tablaDefConsulta;
nuevoClob clob;

nombreTemp varchar(50);
valorTemp varchar(50);
nombreCampo varchar(50);

sortId varchar2(30);
sortDir varchar2(4);



BEGIN
  -- Obtenemos el Id de Pantalla y el Id de Tab
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.idScreen'') from dual' into idScreen using jsonData;
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.idTab'') from dual' into idTab using jsonData;
  
  --Obtenemos los criterios de ordenación
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.sortId'') from dual' into sortId using jsonData;
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.sortDir'') from dual' into sortDir using jsonData;
    
-- Sacamos los filtros asociados a la Pantalla y al Tab, y guardamos la query que se ha establecido para la misma.
  if( idScreen IS NOT NULL AND idTab IS NOT NULL) then
      
    select tab_query into queryDatos from ccr_conf_tab_query where id_screen=idScreen and id_tab=idTab;    
    queryDatos:=SUBSTR(queryDatos,8,LENGTH(queryDatos));
   
    filtro:= ' where ';
      for item in (select * from ccr_conf_tab_filter where id_screen=idScreen and id_tab=idTab)
        loop

          if(item.FILTER_TYPE='CALENDAR' AND item.IS_FROM_TO='Y') then
          campo:=item.ID_FIELD_NAME || '_FROM';
          EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
          if (filtroJson IS NOT NULL ) then
            --insert into AUX values(filtroJson);
            --filtro:= filtro || ' TO_DATE(TO_CHAR('||item.ID_FIELD_NAME||',''DD/MM/YYYY''),''DD/MM/YYYY'') >= TO_DATE('''|| filtroJson||''',''DD/MM/YYYY'')  and';
            filtro:= filtro || item.ID_FIELD_NAME||' >= TO_DATE('''|| filtroJson||''',''DD/MM/YYYY'')  and ';
          end if;
          campo:=item.ID_FIELD_NAME || '_TO';
          EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
          if (filtroJson IS NOT NULL ) then
            --insert into AUX values(filtroJson);
            --filtro:= filtro || ' TO_DATE(TO_CHAR('||item.ID_FIELD_NAME||',''DD/MM/YYYY''),''DD/MM/YYYY'') <= TO_DATE('''|| filtroJson||''',''DD/MM/YYYY'')  and';
            filtro:= filtro || item.ID_FIELD_NAME||' <= TO_DATE('''|| filtroJson||''',''DD/MM/YYYY'')  and ';
          end if;
        else 
          if(item.FILTER_TYPE='CALENDAR' AND item.IS_FROM_TO='N') then
            campo:= item.ID_FIELD_NAME;
            EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
            if (filtroJson IS NOT NULL ) then
              insert into AUX values(filtroJson);
              --filtro:= filtro || ' TO_DATE(TO_CHAR('||item.ID_FIELD_NAME||',''DD/MM/YYYY''),''DD/MM/YYYY'') = TO_DATE('''|| filtroJson||''',''DD/MM/YYYY'')  and';
              filtro:= filtro || item.ID_FIELD_NAME||' = TO_DATE('''|| filtroJson||''',''DD/MM/YYYY'')  and ';
            end if;
          else
            campo:= item.ID_FIELD_NAME;
            EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
            if (filtroJson IS NOT NULL ) then 
              filtroJson:= UPPER(filtroJson);
              --insert into AUX values(filtroJson);
              --filtro:= filtro || item.ID_FIELD_NAME || ' LIKE ''%' || filtroJson || '%'' and ';
              filtro:= filtro || UPPER(item.ID_FIELD_NAME) || ' LIKE ''%' || filtroJson || '%'' and ';
            end if;
          end if;
        end if;
      end loop;
      
      if LENGTH(filtro)=7 then
        filtro:='';
      else
        filtro:= SUBSTR(filtro,1,LENGTH(filtro)-5);
      end if;
    end if;
  
   
  if sortId IS NOT NULL AND LENGTH(sortId)>0 and sortId != 'RN' then
      --queryDatos:='SELECT a.* from (select * from (SELECT ROWNUM rn, '|| queryDatos ||')'|| filtro || ' ORDER BY '||sortId|| ' ' || sortDir || ') a where rn between '||inicio||' and '||fin||'';
      queryDatos:='SELECT a.* from (select ROWNUM rn, b.* from (Select * from (SELECT '|| queryDatos ||') '|| filtro || ' ORDER BY '||sortId|| ' ' || sortDir || ')b ) a';
      
  else
    queryDatos:= 'SELECT a.* from (select ROWNUM rn, b.* from (Select * from (SELECT  '|| queryDatos || ') '||filtro || ')b ) a';
    
  end if;
  
  --queryDatosTotal:=SUBSTR(queryDatos,1,INSTR(queryDatos, 'where rn')-1);
  if INSTR(queryDatos, 'BDD_CCR.')>0 then  
    
    open datos for queryDatos;
  else 
     open datos for 'SELECT * FROM BDD_CCR.CCR_CONF_MODULE WHERE ID_MODULE=DESCRIPTION';
      consulta:=queryDatos;
  end if;
  
 
END getListadoCompleto;

procedure getListadoTitulosTabla(datos out sys_refcursor)
AS
BEGIN
  open datos for 'SELECT ID_FIELD_NAME, FIELD_TEXT FROM CCR_CONF_FIELD_TEXT';
  

END getListadoTitulosTabla;


procedure rda_srv_getAcciones(ID_SCREEN in out varchar2,ID_USER in varchar2, BOTONES out sys_refcursor)
AS
BEGIN
    open BOTONES for 'SELECT B.ID_TAB, B.ID_SCREEN, B.ID_BUTTON, B.BUTTON_ORDER, B.MSG_CONF, B.MSG_OK, B.MSG_ERROR, B.BUTTON_TITLE, B.BUTTON_DESCR, B.ICON_TAG, B.ACTION, B.ACTION_TYPE, P.PERMISSION_LEVEL, B.HAS_CONF 
              FROM CCR_CONF_ACTION_BUTTON B LEFT JOIN  CCR_CONF_PERMISSION_SCREEN P ON B.ID_SCREEN=P.ID_SCREEN
              LEFT JOIN CCR_CONF_USER U ON U.ROLE=P.ID_ROLE
              WHERE  UPPER(B.ID_SCREEN)= UPPER('''||ID_SCREEN||''') AND P.PERMISSION_LEVEL=2 AND  UPPER(U.ID_USER)= UPPER('''||ID_USER||''')';
 

END rda_srv_getAcciones;

procedure rda_srv_Acciones(estado out number, mensaje out varchar2,idButton in varchar2,idScreen in varchar2)
AS
mensaje_OK varchar2(300);
mensaje_ERR varchar2(300);
accion varchar2(4000);
BEGIN
    SELECT MSG_OK, MSG_ERROR ,ACCION INTO mensaje_OK, mensaje_ERR, accion FROM CCR_CONF_ACTION_BUTTON WHERE ID_BUTTON = idButton AND ID_SCREEN = idScreen;
    EXECUTE IMMEDIATE accion;
    estado:=200;
    mensaje:=mensaje_OK;
    EXCEPTION
      WHEN OTHERS THEN
        estado:=500;
        mensaje:=mensaje_ERR || ' --Error: '|| TO_CHAR(SQLCODE)|| SQLERRM; 
  
END rda_srv_Acciones;

PROCEDURE  getDatosConfigReport(datosReport out sys_refcursor,idTab in VARCHAR2,idScreen in VARCHAR2) 
AS queryString varchar2(500);
BEGIN
    queryString:='SELECT ID_REPORT_NAME FROM CCR_CONF_TAB_REPORT WHERE ID_TAB='''||idTab||''' AND ID_SCREEN='''||idScreen||'''';
    open datosReport for queryString;
END getDatosConfigReport;
/*
PROCEDURE  RDA_SRV_GETTICKETINFO(usuarioRDA out sys_refcursor, ticket in VARCHAR2) 
AS queryString varchar2(500);
BEGIN
    queryString:='SELECT ID_USER as USUARIO,TICKET as TICKET,ACCESS_DATE as FECHA,token FROM CCR_CONF_USER_ACCESS WHERE TICKET ='''||ticket||''''; 
    --queryString:='SELECT * FROM CCR_CONF_USER_ACCESS'; 
    open usuarioRDA for queryString; 
END RDA_SRV_GETTICKETINFO; 
*/

procedure  RDA_SRV_GETTICKETINFO(usuarioRDA out sys_refcursor, accesoModulos out sys_refcursor, ticket in VARCHAR2) 
AS 
queryString varchar2(500);
queryModule varchar2(500);
usuarioModulo varchar2(200);

BEGIN
    -- Guardamos el usuario en usuarioModulo
    SELECT ID_USER into usuarioModulo FROM CCR_CONF_USER_ACCESS WHERE TICKET=ticket and rownum=1;
    
    -- Devolver el usuario, ticket, fecha y token
    queryString:='SELECT ID_USER as USUARIO,TICKET as TICKET,ACCESS_DATE as FECHA,token FROM CCR_CONF_USER_ACCESS WHERE TICKET ='''||ticket||''''; 
    
    -- Devolver si el usuario tiene acceso a alguno de los módulos
    queryModule:='SELECT PM.ID_ROLE, PM.ID_MODULE, PM.PERMISSION_LEVEL, M.MODULE_NAME, M.DESCRIPTION, M.MODULE_URL FROM CCR_CONF_PERMISSION_MODULE PM 
                    LEFT JOIN CCR_CONF_USER U ON PM.ID_ROLE=U.ROLE 
                    LEFT JOIN CCR_CONF_MODULE M ON PM.ID_MODULE=M.ID_MODULE 
                    WHERE UPPER(U.ID_USER) = UPPER('''||usuarioModulo||''')';
    -- Devolver los cursores
    open usuarioRDA for queryString;
    open accesoModulos for queryModule;
    
END RDA_SRV_GETTICKETINFO; 

procedure ejecutarAccion(estado out number, mensaje out varchar2, cuerpo in varchar2, msg_ok in varchar2, msg_error in varchar2)
  as
  
   BEGIN
    EXECUTE IMMEDIATE cuerpo;
    estado:=200;
    mensaje:=msg_ok;
    EXCEPTION
      WHEN OTHERS THEN
        estado:=500;
        mensaje:=msg_error || ' --Error: '|| TO_CHAR(SQLCODE)|| SQLERRM; 
  END ejecutarAccion;


/*
procedure rda_srv_Edicion(estado out number, mensaje out varchar2, fila out varchar2,operaciones in clob)
AS

filaActual number;

BEGIN
   FOR item IN( SELECT operacion, fila FROM dual, JSON_TABLE(operaciones, '$[*]'
          COLUMNS (operacion varchar2(4000) PATH '$.operacion',
                   fila varchar2(3) PATH '$.fila')))

      LOOP
        BEGIN
          filaActual:=item.fila;
          EXECUTE IMMEDIATE item.operacion;
        END;
      END LOOP;
      COMMIT;
      estado:=200;
      mensaje:='Operación realizada correctamente';
      EXCEPTION
              WHEN OTHERS THEN
                  ROLLBACK;
                  estado:=500;
                  mensaje:= 'Error: '|| TO_CHAR(SQLCODE)|| SQLERRM;
                  fila := filaActual;

END rda_srv_Edicion;

*/
/*
  PROCEDURE srv_rda_getValFiltros(filtrosTab out sys_refcursor, valoresFiltrosTab out sys_refcursor, whereFiltro out varchar2, jsonData in clob)
AS
screen varchar2(100);
tab varchar2(100);
c_datos   sys_refcursor;
queryFiltros varchar2(4000);
queryDatos varchar2(4000);

nuevoClob clob;
nombreCampo varchar(50);
nombreTemp varchar(50);
valorTemp varchar(50);
campo varchar2(100);
filtroJson varchar2(100);

hoy varchar2(10);
fechaFrom varchar2(10);

BEGIN
  
  -- Obtenemos el Id de Pantalla y el Id de Tab
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.idScreen'') from dual' into screen using jsonData;
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.idTab'') from dual' into tab using jsonData;
  
  EXECUTE IMMEDIATE 'SELECT TO_CHAR(sysdate, ''dd/mm/yyyy'') FROM DUAL' into hoy;
  
  if( screen IS NOT NULL AND tab IS NOT NULL) then
    queryFiltros:='SELECT F.ID_FIELD_NAME name , F.FILTER_ORDER , F.FILTER_TYPE type, NVL(T.FIELD_TEXT, F.ID_FIELD_NAME) placeholer, F.IS_FROM_TO, '''' as  options, '''' as  value, F.DEFAULT_VALUE, F.DEF_DAY_RANGE FROM BDD_CCR.CCR_CONF_TAB_FILTER F 
                  LEFT JOIN BDD_CCR.CCR_CONF_FIELD_TEXT T ON T.ID_FIELD_NAME = F.ID_FIELD_NAME 
                  WHERE ID_TAB = '''||tab ||''' AND ID_SCREEN = '''||screen ||''' ORDER BY F.FILTER_ORDER';
    
    
    select tab_query into queryDatos from ccr_conf_tab_query where id_screen=screen and id_tab=tab;    
    
    
    queryDatos:=SUBSTR(queryDatos,8,LENGTH(queryDatos));
   
    whereFiltro:= ' where ';

    nuevoClob:='INICIO';
      for item in (select * from ccr_conf_tab_filter where id_screen=screen and id_tab=tab)
        loop
          --sacamos los campos de los filtros informados, para construir la query que traerá los datos para los mismos
          if(item.FILTER_TYPE='SELECT' and INSTR(queryDatos, 'BDD_CCR.')>0 )then
             begin
                nombreCampo:=item.ID_FIELD_NAME;  
                --Buscamos los valores de los campos
                open  c_datos for 'select distinct '||nombreCampo||' valor ,'''||nombreCampo||''' nombre  FROM (SELECT '|| queryDatos||') order by nombre';
                  LOOP 
                    FETCH c_datos into  valorTemp,nombreTemp; 
                    --Construimos la tabla de objectos dinámicamente para ejecutarla al final
                    if nuevoClob='INICIO' then
                        nuevoCLob:='tablaDatosFiltro(datoFiltro('''||nombreTemp||''','''||valorTemp||''')';
                    else 
                        nuevoCLob:=nuevoClob||',datoFiltro('''||nombreTemp||''','''||valorTemp||''')';
                    end if;
                    EXIT WHEN c_datos%notfound; 
                  END LOOP; 
                CLOSE c_datos; 
             end;
             
          end if;
          
          --sacamos los campos del tipo calendar para saber si son IS_FROM_TO
          if(item.FILTER_TYPE='CALENDAR' AND item.IS_FROM_TO='Y') then
            campo:=item.ID_FIELD_NAME || '_FROM';
            EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
            if (filtroJson IS NOT NULL ) then
              whereFiltro:= whereFiltro || item.ID_FIELD_NAME||' >= TO_DATE('''|| filtroJson||''',''DD/MM/YYYY'')  and ';
            else
              if (item.DEFAULT_VALUE='SYSDATE' ) then
                if (item.DEF_DAY_RANGE IS NOT NULL) then
                  begin
                    EXECUTE IMMEDIATE 'SELECT TO_CHAR(sysdate - '||item.DEF_DAY_RANGE||', ''dd/mm/yyyy'') FROM DUAL' into fechaFrom;
                  end;
                  whereFiltro:= whereFiltro || item.ID_FIELD_NAME||' >= TO_DATE('''|| fechaFrom ||''',''DD/MM/YYYY'')  and '|| item.ID_FIELD_NAME||' <= TO_DATE('''|| hoy ||''',''DD/MM/YYYY'')  and ';
                else
                  whereFiltro:= whereFiltro || item.ID_FIELD_NAME||' = TO_DATE('''|| hoy ||''',''DD/MM/YYYY'')  and ';
                end if;
              end if;
            end if;
            campo:=item.ID_FIELD_NAME || '_TO';
            EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
            if (filtroJson IS NOT NULL ) then
              whereFiltro:= whereFiltro || item.ID_FIELD_NAME||' <= TO_DATE('''|| filtroJson||''',''DD/MM/YYYY'')  and ';  
            end if;
          else 
            if(item.FILTER_TYPE='CALENDAR' AND item.IS_FROM_TO='N') then
              campo:= item.ID_FIELD_NAME;
              EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
              if (filtroJson IS NOT NULL ) then
                whereFiltro:= whereFiltro || item.ID_FIELD_NAME||' = TO_DATE('''|| filtroJson||''',''DD/MM/YYYY'')  and ';
              else
                if item.DEFAULT_VALUE='SYSDATE' then
                  whereFiltro:= whereFiltro || item.ID_FIELD_NAME||' =  TO_DATE('''|| hoy ||''',''DD/MM/YYYY'')  and ';
                end if;
              end if;
            else
              campo:= item.ID_FIELD_NAME;
              if item.FILTER_TYPE='LIST' then
                EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
                if (filtroJson IS NOT NULL ) then 
                  filtroJson:= UPPER(filtroJson);
                  whereFiltro:= whereFiltro ||' UPPER('||item.ID_FIELD_NAME||') = ''' || filtroJson || ''' and ';
                else
                  if item.DEFAULT_VALUE IS NOT NULL then
                    whereFiltro:= whereFiltro ||' UPPER('||item.ID_FIELD_NAME||') = ''' || item.DEFAULT_VALUE || ''' and ';
                  end if;
                end if;
              else
                EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
                if (filtroJson IS NOT NULL ) then 
                  filtroJson:= UPPER(filtroJson);
                  whereFiltro:= whereFiltro ||' UPPER('||item.ID_FIELD_NAME||') LIKE ''%' || filtroJson || '%'' and ';
                else
                  if item.DEFAULT_VALUE IS NOT NULL then
                    whereFiltro:= whereFiltro ||' UPPER('||item.ID_FIELD_NAME||') LIKE ''%' || item.DEFAULT_VALUE || '%'' and ';
                  end if;
                end if;
              end if;
            end if;
          end if;
        end loop;
        if LENGTH(whereFiltro)=7 then --noy hay filtros
          whereFiltro:='';
        else
          whereFiltro:= SUBSTR(whereFiltro,1,LENGTH(whereFiltro)-5);
        end if;
        nuevoClob:=nuevoClob||')';
        if INSTR(queryDatos, 'BDD_CCR.')>0 and INSTR(nuevoClob, 'INICIO') = 0 then
             open valoresFiltrosTab for 'select distinct t.nombre,t.valor from table('||nuevoClob||') t';
        else
          open valoresFiltrosTab for 'SELECT * FROM BDD_CCR.CCR_CONF_MODULE WHERE ID_MODULE=DESCRIPTION';
        end if;
        open filtrosTab for queryFiltros;
  end if;

END srv_rda_getValFiltros;

procedure getListadoPorPantallaTab(tipos out sys_refcursor, datos out sys_refcursor, totalDatos out number, filtros out sys_refcursor, valoresFiltros out sys_refcursor, valoresFiltrosList out sys_refcursor, consulta out varchar2, consultaTotal out varchar2, tabla out varchar2, camposEditables out sys_refcursor, valoresCampEditList out sys_refcursor, jsonData in clob)
AS


count_datos sys_refcursor;
select_str constant varchar2(6) := 'SELECT';
idScreen varchar2(100);
idTab varchar2(100);
filtro varchar2(4000);
inicio number;
fin number;
cantItems number;
queryDatos varchar2(4000);
queryDatosTotal varchar2(4000);
queryCountDatosSinPag varchar2(4000);
queryFiltros varchar2(4000);
nuevoClob clob;

sortId varchar2(30);
sortDir varchar2(4);

filtrosTab sys_refcursor;
valoresFiltrosTab sys_refcursor;
whereFiltro varchar2(4000);

BEGIN
  -- Obtenemos el Id de Pantalla y el Id de Tab
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.idScreen'') from dual' into idScreen using jsonData;
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.idTab'') from dual' into idTab using jsonData;
  -- Obtenemos el incio y fin de la paginación del listado de datos
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.inicio'') from dual' into inicio using jsonData;
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.fin'') from dual' into fin using jsonData;
  --Obtenemos los criterios de ordenación
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.sortId'') from dual' into sortId using jsonData;
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.sortDir'') from dual' into sortDir using jsonData;
  
  
  if inicio is null then
      inicio:=1;
  end if;
  if fin is null then
      fin:= 1048576; --maximo numero de filas en excel
  end if;
  cantItems:= (fin-inicio+1);
  totalDatos:= 0;
  
  --Llamamos al procedure que saca los filtros, los valores de filtros select y el where en caso de filtrar
  
   srv_rda_getValFiltros(filtrosTab, valoresFiltrosTab, whereFiltro, jsonData);
   filtro:=whereFiltro;
   filtros:=filtrosTab;
   valoresFiltros:=valoresFiltrosTab;

  if( idScreen IS NOT NULL AND idTab IS NOT NULL) then
    select tab_query into queryDatos from ccr_conf_tab_query where id_screen=idScreen and id_tab=idTab;    
    
    --sacamos la tabla de la query
    tabla:=SUBSTR(queryDatos,INSTR(UPPER(queryDatos), 'FROM')+5,LENGTH(queryDatos));
    --quitamos el esquema del nombre de la tabla
    tabla:=SUBSTR(tabla,INSTR(tabla,'.')+1, LENGTH(tabla));
    
    queryDatos:=SUBSTR(queryDatos,8,LENGTH(queryDatos));
    
    queryCountDatosSinPag:= 'select count(*) from (SELECT '|| queryDatos ||') '|| filtro;
    if sortId IS NOT NULL AND LENGTH(sortId)>0 and sortId != 'RN' then
        queryDatos:='SELECT a.* from (select ROWNUM rn, b.* from (Select * from (SELECT '|| queryDatos ||') '|| filtro || ' ORDER BY '||sortId|| ' ' || sortDir || ')b ) a where rn between '||inicio||' and '||fin||'';
    else
      queryDatos:= 'SELECT a.* from (select ROWNUM rn, b.* from (Select * from (SELECT  '|| queryDatos || ') '||filtro || ')b ) a where rn between '||inicio||' and '||fin||'';
    end if;
  
    queryDatosTotal:=SUBSTR(queryDatos,1,INSTR(queryDatos, 'where rn')-1);
    
     --Obtine los valores de los filtros del tipo LIST
    srv_rda_getValFiltrosList(valoresFiltrosList, idScreen , idTab );
    
    --Obtiene la configuracion de los campos si la tabla es editable
    getConfigCamposEditables(camposEditables,valoresCampEditList, idScreen, idTab );
    
  end if; --fin if(idScreen IS NOT NULL AND idTab IS NOT NULL)
  if INSTR(queryDatos, 'BDD_CCR.')>0 then  
    begin
      open  count_datos for queryCountDatosSinPag ;
        FETCH count_datos into  cantItems;
      close count_datos;
    end;
    open datos for queryDatos;
  
    EXECUTE IMMEDIATE queryCountDatosSinPag into totalDatos;
    open tipos for 'SELECT  table_name, column_name, data_type, data_length, NULLABLE FROM all_tab_columns where table_name = '''||tabla||'''';
  else 
     open datos for 'SELECT * FROM BDD_CCR.CCR_CONF_MODULE WHERE ID_MODULE=DESCRIPTION';
     open tipos for 'SELECT * FROM BDD_CCR.CCR_CONF_MODULE WHERE ID_MODULE=DESCRIPTION';

     IF idScreen='MULTICEDENTES' and idTab='MATRIZ_MULTICED' THEN
      consulta:=queryDatosTotal;
     ELSE
      consulta:=queryDatos;
     END IF;
     consultaTotal:=queryDatosTotal;
  end if;
 
 
END getListadoPorPantallaTab; 

procedure srv_rda_getValFiltrosList(valoresFiltrosListTab out sys_refcursor , idScreen in varchar2, idTab in varchar2)
as

separador constant varchar2(1):=';';
consulta varchar2(4000);
camposStr varchar(1000);
elem varchar2(50);

nombreTemp varchar(100);
valorTemp varchar(4000);
descripcionTemp varchar(4000);
nombreCampo varchar(100);

BEGIN
      consulta:= 'select ID_FIELD_NAME, FILTER_VALUE, FILTER_DESCR from CCR_CONF_FILTER_LIST WHERE 
                  ID_SCREEN=''' || idScreen||''' AND ID_TAB=''' ||idTab|| ''' ORDER BY ID_FIELD_NAME, FILTER_DESCR';
       open valoresFiltrosListTab for consulta;
       
END srv_rda_getValFiltrosList;

PROCEDURE getConfigCamposEditables(camposEditables out sys_refcursor, valoresCampEditList out sys_refcursor, idScreen in varchar2, idTab in varchar2)
as
queryCamposEditables varchar2(1000);
queryValoresCampEditList varchar2(1000);

BEGIN
    queryCamposEditables:= 'SELECT ID_FIELD_NAME, FIELD_TYPE, IS_BLOCKED, FIELD_FORMAT FROM CCR_CONF_EDIT_FIELD 
                            WHERE ID_TAB = '''||idTab ||''' AND ID_SCREEN = '''||idScreen ||'''';
    open camposEditables for queryCamposEditables;
    queryValoresCampEditList:= 'SELECT ID_FIELD_NAME, FIELD_VALUE, FIELD_DESCR FROM CCR_CONF_EDIT_LIST 
                                WHERE ID_TAB = '''||idTab ||''' AND ID_SCREEN = '''||idScreen ||'''';
    open valoresCampEditList for queryValoresCampEditList;
    
    
END getConfigCamposEditables;

*/
  PROCEDURE srv_rda_getValFiltros(filtrosTab out sys_refcursor, valoresFiltrosTab out sys_refcursor, whereFiltro out varchar2, jsonData in clob)
AS
screen varchar2(100);
tab varchar2(100);
c_datos   sys_refcursor;
queryFiltros varchar2(4000);
queryDatos varchar2(4000);

nuevoClob clob;
nombreCampo varchar(50);
nombreTemp varchar(50);
valorTemp varchar(50);
campo varchar2(100);
filtroJson varchar2(100);

hoy varchar2(10);
fechaFrom varchar2(10);

BEGIN
  
  -- Obtenemos el Id de Pantalla y el Id de Tab
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.idScreen'') from dual' into screen using jsonData;
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.idTab'') from dual' into tab using jsonData;
  
  EXECUTE IMMEDIATE 'SELECT TO_CHAR(sysdate, ''dd/mm/yyyy'') FROM DUAL' into hoy;
  
  if( screen IS NOT NULL AND tab IS NOT NULL) then
    queryFiltros:='SELECT F.ID_FIELD_NAME name , F.FILTER_ORDER , F.FILTER_TYPE type, NVL(T.FIELD_TEXT, F.ID_FIELD_NAME) placeholer, F.IS_FROM_TO, '''' as  options, '''' as  value, F.DEFAULT_VALUE, F.DEF_DAY_RANGE FROM BDD_CCR.CCR_CONF_TAB_FILTER F 
                  LEFT JOIN BDD_CCR.CCR_CONF_FIELD_TEXT T ON T.ID_FIELD_NAME = F.ID_FIELD_NAME 
                  WHERE ID_TAB = '''||tab ||''' AND ID_SCREEN = '''||screen ||''' ORDER BY F.FILTER_ORDER';
    
    
    select tab_query into queryDatos from ccr_conf_tab_query where id_screen=screen and id_tab=tab;    
    
    
    queryDatos:=SUBSTR(queryDatos,8,LENGTH(queryDatos));
   
    whereFiltro:= ' where ';

    nuevoClob:='INICIO';
      for item in (select * from ccr_conf_tab_filter where id_screen=screen and id_tab=tab)
        loop
          --sacamos los campos de los filtros informados, para construir la query que traerá los datos para los mismos
          if(item.FILTER_TYPE='SELECT' and INSTR(queryDatos, 'BDD_CCR.')>0 )then
             begin
                nombreCampo:=item.ID_FIELD_NAME;  
                --Buscamos los valores de los campos
                open  c_datos for 'select distinct '||nombreCampo||' valor ,'''||nombreCampo||''' nombre  FROM (SELECT '|| queryDatos||') order by nombre';
                  LOOP 
                    FETCH c_datos into  valorTemp,nombreTemp; 
                    --Construimos la tabla de objectos dinámicamente para ejecutarla al final
                    if nuevoClob='INICIO' then
                        nuevoCLob:='tablaDatosFiltro(datoFiltro('''||nombreTemp||''','''||valorTemp||''')';
                    else 
                        nuevoCLob:=nuevoClob||',datoFiltro('''||nombreTemp||''','''||valorTemp||''')';
                    end if;
                    EXIT WHEN c_datos%notfound; 
                  END LOOP; 
                CLOSE c_datos; 
             end;
             
          end if;
          
          --sacamos los campos del tipo calendar para saber si son IS_FROM_TO
          if(item.FILTER_TYPE='CALENDAR' AND item.IS_FROM_TO='Y') then
            campo:=item.ID_FIELD_NAME || '_FROM';
            EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
            if (filtroJson IS NOT NULL ) then
              whereFiltro:= whereFiltro || item.ID_FIELD_NAME||' >= TO_DATE('''|| filtroJson||''',''DD/MM/YYYY'')  and ';
            else
              if (item.DEFAULT_VALUE='SYSDATE' ) then
                if (item.DEF_DAY_RANGE IS NOT NULL) then
                  begin
                    EXECUTE IMMEDIATE 'SELECT TO_CHAR(sysdate - '||item.DEF_DAY_RANGE||', ''dd/mm/yyyy'') FROM DUAL' into fechaFrom;
                  end;
                  whereFiltro:= whereFiltro || item.ID_FIELD_NAME||' >= TO_DATE('''|| fechaFrom ||''',''DD/MM/YYYY'')  and '|| item.ID_FIELD_NAME||' <= TO_DATE('''|| hoy ||''',''DD/MM/YYYY'')  and ';
                else
                  whereFiltro:= whereFiltro || item.ID_FIELD_NAME||' = TO_DATE('''|| hoy ||''',''DD/MM/YYYY'')  and ';
                end if;
              end if;
            end if;
            campo:=item.ID_FIELD_NAME || '_TO';
            EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
            if (filtroJson IS NOT NULL ) then
              whereFiltro:= whereFiltro || item.ID_FIELD_NAME||' <= TO_DATE('''|| filtroJson||''',''DD/MM/YYYY'')  and ';  
            end if;
          else 
            if(item.FILTER_TYPE='CALENDAR' AND item.IS_FROM_TO='N') then
              campo:= item.ID_FIELD_NAME;
              EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
              if (filtroJson IS NOT NULL ) then
                whereFiltro:= whereFiltro || item.ID_FIELD_NAME||' = TO_DATE('''|| filtroJson||''',''DD/MM/YYYY'')  and ';
              else
                if item.DEFAULT_VALUE='SYSDATE' then
                  whereFiltro:= whereFiltro || item.ID_FIELD_NAME||' =  TO_DATE('''|| hoy ||''',''DD/MM/YYYY'')  and ';
                end if;
              end if;
            else
              campo:= item.ID_FIELD_NAME;
              if item.FILTER_TYPE='LIST' or item.FILTER_TYPE='SELECT' then
                EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
                if (filtroJson IS NOT NULL ) then 
                  filtroJson:= UPPER(filtroJson);
                  whereFiltro:= whereFiltro ||' UPPER('||item.ID_FIELD_NAME||') = ''' || filtroJson || ''' and ';
                else
                  if item.DEFAULT_VALUE IS NOT NULL then
                    whereFiltro:= whereFiltro ||' UPPER('||item.ID_FIELD_NAME||') = ''' || item.DEFAULT_VALUE || ''' and ';
                  end if;
                end if;
              else
                EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.' || campo || ''') from dual' into filtroJson using jsonData;
                if (filtroJson IS NOT NULL ) then 
                  filtroJson:= UPPER(filtroJson);
                  whereFiltro:= whereFiltro ||' UPPER('||item.ID_FIELD_NAME||') LIKE ''%' || filtroJson || '%'' and ';
                else
                  if item.DEFAULT_VALUE IS NOT NULL then
                    whereFiltro:= whereFiltro ||' UPPER('||item.ID_FIELD_NAME||') LIKE ''%' || item.DEFAULT_VALUE || '%'' and ';
                  end if;
                end if;
              end if;
            end if;
          end if;
        end loop;
        if LENGTH(whereFiltro)=7 then --noy hay filtros
          whereFiltro:='';
        else
          whereFiltro:= SUBSTR(whereFiltro,1,LENGTH(whereFiltro)-5);
        end if;
        nuevoClob:=nuevoClob||')';
        if INSTR(queryDatos, 'BDD_CCR.')>0 and INSTR(nuevoClob, 'INICIO') = 0 then
             open valoresFiltrosTab for 'select distinct t.nombre,t.valor from table('||nuevoClob||') t';
        else
          open valoresFiltrosTab for 'SELECT * FROM BDD_CCR.CCR_CONF_MODULE WHERE ID_MODULE=DESCRIPTION';
        end if;
        open filtrosTab for queryFiltros;
  end if;

END srv_rda_getValFiltros;

procedure getListadoPorPantallaTab(tipos out sys_refcursor, datos out sys_refcursor, totalDatos out number, filtros out sys_refcursor, valoresFiltros out sys_refcursor, valoresFiltrosList out sys_refcursor, consulta out varchar2, consultaTotal out varchar2, tabla out varchar2, camposEditables out sys_refcursor, valoresCampEditList out sys_refcursor, jsonData in clob)
AS


count_datos sys_refcursor;
select_str constant varchar2(6) := 'SELECT';
idScreen varchar2(100);
idTab varchar2(100);
filtro varchar2(4000);
inicio number;
fin number;
cantItems number;
queryDatos varchar2(4000);
queryDatosTotal varchar2(4000);
queryCountDatosSinPag varchar2(4000);
queryFiltros varchar2(4000);
nuevoClob clob;

sortId varchar2(30);
sortDir varchar2(4);

filtrosTab sys_refcursor;
valoresFiltrosTab sys_refcursor;
whereFiltro varchar2(4000);

BEGIN
  -- Obtenemos el Id de Pantalla y el Id de Tab
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.idScreen'') from dual' into idScreen using jsonData;
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.idTab'') from dual' into idTab using jsonData;
  -- Obtenemos el incio y fin de la paginación del listado de datos
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.inicio'') from dual' into inicio using jsonData;
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.fin'') from dual' into fin using jsonData;
  --Obtenemos los criterios de ordenación
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.sortId'') from dual' into sortId using jsonData;
  EXECUTE IMMEDIATE 'select JSON_VALUE(:1,''$.sortDir'') from dual' into sortDir using jsonData;
  
  
  if inicio is null then
      inicio:=1;
  end if;
  if fin is null then
      fin:= 1048576; --maximo numero de filas en excel
  end if;
  cantItems:= (fin-inicio+1);
  totalDatos:= 0;
  
  --Llamamos al procedure que saca los filtros, los valores de filtros select y el where en caso de filtrar
  
   srv_rda_getValFiltros(filtrosTab, valoresFiltrosTab, whereFiltro, jsonData);
   filtro:=whereFiltro;
   filtros:=filtrosTab;
   valoresFiltros:=valoresFiltrosTab;

  if( idScreen IS NOT NULL AND idTab IS NOT NULL) then
    select tab_query into queryDatos from ccr_conf_tab_query where id_screen=idScreen and id_tab=idTab;    
    
    --sacamos la tabla de la query
    tabla:=SUBSTR(queryDatos,INSTR(UPPER(queryDatos), 'FROM')+5,LENGTH(queryDatos));
    --quitamos el esquema del nombre de la tabla
    tabla:=SUBSTR(tabla,INSTR(tabla,'.')+1, LENGTH(tabla));
    
    queryDatos:=SUBSTR(queryDatos,8,LENGTH(queryDatos));
    
    queryCountDatosSinPag:= 'select count(*) from (SELECT '|| queryDatos ||') '|| filtro;
    if sortId IS NOT NULL AND LENGTH(sortId)>0 and sortId != 'RN' then
        queryDatos:='SELECT a.* from (select ROWNUM rn, b.* from (Select * from (SELECT '|| queryDatos ||') '|| filtro || ' ORDER BY '||sortId|| ' ' || sortDir || ')b ) a where rn between '||inicio||' and '||fin||'';
    else
      queryDatos:= 'SELECT a.* from (select ROWNUM rn, b.* from (Select * from (SELECT  '|| queryDatos || ') '||filtro || ')b ) a where rn between '||inicio||' and '||fin||'';
    end if;
  
    queryDatosTotal:=SUBSTR(queryDatos,1,INSTR(queryDatos, 'where rn')-1);
    
     --Obtine los valores de los filtros del tipo LIST
    srv_rda_getValFiltrosList(valoresFiltrosList, idScreen , idTab );
    
    --Obtiene la configuracion de los campos si la tabla es editable
    getConfigCamposEditables(camposEditables,valoresCampEditList, idScreen, idTab );
    
  end if; --fin if(idScreen IS NOT NULL AND idTab IS NOT NULL)
  if INSTR(queryDatos, 'BDD_CCR.')>0 then  
    begin
      open  count_datos for queryCountDatosSinPag ;
        FETCH count_datos into  cantItems;
      close count_datos;
    end;
    open datos for queryDatos;
  
    EXECUTE IMMEDIATE queryCountDatosSinPag into totalDatos;
    open tipos for 'SELECT  table_name, column_name, data_type, data_length, NULLABLE FROM all_tab_columns where table_name = '''||tabla||'''';
  else 
     open datos for 'SELECT * FROM BDD_CCR.CCR_CONF_MODULE WHERE ID_MODULE=DESCRIPTION';
     open tipos for 'SELECT * FROM BDD_CCR.CCR_CONF_MODULE WHERE ID_MODULE=DESCRIPTION';

     IF (idScreen='MULTICEDENTES' and idTab='MATRIZ_MULTICED') or (idScreen='GAR_TOTALES' and idTab='TOTALES') 
        or(idScreen='GAR_TOTALES' and idTab='DASHBOARD' )THEN
      consulta:=queryDatosTotal;
     ELSE
      consulta:=queryDatos;
     END IF;
     consultaTotal:=queryDatosTotal;
  end if;
 
 
END getListadoPorPantallaTab; 

procedure srv_rda_getValFiltrosList(valoresFiltrosListTab out sys_refcursor , idScreen in varchar2, idTab in varchar2)
as

separador constant varchar2(1):=';';
consulta varchar2(4000);
camposStr varchar(1000);
elem varchar2(50);

nombreTemp varchar(100);
valorTemp varchar(4000);
descripcionTemp varchar(4000);
nombreCampo varchar(100);

BEGIN
      consulta:= 'select ID_FIELD_NAME, FILTER_VALUE, FILTER_DESCR from CCR_CONF_FILTER_LIST WHERE 
                  ID_SCREEN=''' || idScreen||''' AND ID_TAB=''' ||idTab|| ''' ORDER BY ID_FIELD_NAME, FILTER_DESCR';
       open valoresFiltrosListTab for consulta;
       
END srv_rda_getValFiltrosList;

PROCEDURE getConfigCamposEditables(camposEditables out sys_refcursor, valoresCampEditList out sys_refcursor, idScreen in varchar2, idTab in varchar2)
as
queryCamposEditables varchar2(1000);
queryValoresCampEditList varchar2(1000);

BEGIN
    queryCamposEditables:= 'SELECT ID_FIELD_NAME, FIELD_TYPE, IS_BLOCKED, FIELD_FORMAT FROM CCR_CONF_EDIT_FIELD 
                            WHERE ID_TAB = '''||idTab ||''' AND ID_SCREEN = '''||idScreen ||'''';
    open camposEditables for queryCamposEditables;
    queryValoresCampEditList:= 'SELECT ID_FIELD_NAME, FIELD_VALUE, FIELD_DESCR FROM CCR_CONF_EDIT_LIST 
                                WHERE ID_TAB = '''||idTab ||''' AND ID_SCREEN = '''||idScreen ||'''';
    open valoresCampEditList for queryValoresCampEditList;
    
    
END getConfigCamposEditables;

  procedure rda_srv_Edicion(estado out number, mensaje out varchar2, fila out varchar2,operaciones in listacruds)
  as 
  laSql varchar(5000);
  opInsert varchar(5000):='insert into :tabla (:campos) values(:valoresInsert);';
  opUpdate varchar(5000):='update :tabla set :valoresUpdate where :idRow;';
  opDelete varchar(5000):='delete from :tabla where :idRow;';
  opTiposCampos varchar(1000):='select data_type FROM all_tab_columns where table_name = '':tabla'' and column_name = '':column''';
  queryTiposCampos varchar(2000);
  campos varchar(5000);
  valores varchar(10000);
  tipo varchar2(10);

  begin  
  --mensaje:='COMPLETADO';
  --mensaje:=operaciones.listaoperaciones(1).id; 
  begin
 
  for opera in 1 .. operaciones.listaoperaciones.count
  loop
        --fila:=1;
        fila:=operaciones.listaoperaciones(opera).fila;
        -- ES UNA OPERACIÓN <<INSERT>>     
        if operaciones.listaoperaciones(opera).operacion = 'INSERT' then
          laSql:=opInsert;
          -- ESTABLECEMOS EL NOMBRE DE LA TABLA
          laSql:=replace(laSql,':tabla',operaciones.listaoperaciones(opera).tabla);
          --Indicamos la tabla a la query que obtiene los tipos de campo
          opTiposCampos:=replace(opTiposCampos,':tabla',operaciones.listaoperaciones(opera).tabla);
          -- CONSTRUIMOS NOMBRES DE COLUMNAS Y VALORES
          
          for i in 1 .. operaciones.listaoperaciones(opera).valores.count 
          loop
            -- Construimos los campos y valores del insert
            --Sacamos el tipo del campo del item i
            queryTiposCampos:=replace(opTiposCampos,':column',operaciones.listaoperaciones(opera).valores(i).clave);
            execute immediate queryTiposCampos into tipo;
            if i=1 then
              campos:=operaciones.listaoperaciones(opera).valores(i).clave;
              if tipo='DATE' then
                valores:='TO_DATE('''||operaciones.listaoperaciones(opera).valores(i).valor||''',''DD/MM/YYYY'')';
              else
                if tipo='NUMBER' then
                  valores:= operaciones.listaoperaciones(opera).valores(i).valor;
                else
                  valores:=''''||operaciones.listaoperaciones(opera).valores(i).valor||'''';
                end if;
              end if;
            else
              --caso en el que no es el primero
              campos:=campos||','||operaciones.listaoperaciones(opera).valores(i).clave;
              if tipo='DATE' then
                valores:=valores||',TO_DATE('''||operaciones.listaoperaciones(opera).valores(i).valor||''',''DD/MM/YYYY'')';
              else
                if tipo='NUMBER' then
                  valores:= valores||','|| operaciones.listaoperaciones(opera).valores(i).valor;
                else
                  valores:=valores||','||''''||operaciones.listaoperaciones(opera).valores(i).valor||'''';
                end if;
              end if;
            end if;
         
          end loop; 
          -- ESTABLECEMOS NOMBRES DE COLUMNAS Y VALORES
          laSql:=replace(laSql,':campos',campos);
          laSql:=replace(laSql,':valoresInsert',valores);
          mensaje:=laSql;
        -- ES UNA OPERACIÓN <<UPDATE>>
        elsif operaciones.listaoperaciones(opera).operacion = 'UPDATE' then
          laSql:=opUpdate;
          -- ESTABLECEMOS EL NOMBRE DE LA TABLA
          laSql:=replace(laSql,':tabla',operaciones.listaoperaciones(opera).tabla);
          --Indicamos la tabla a la query que obtiene los tipos de campo
          opTiposCampos:=replace(opTiposCampos,':tabla',operaciones.listaoperaciones(opera).tabla);

          -- CONSTRUIMOS NOMBRES DE COLUMNAS Y VALORES
          for i in 1 .. operaciones.listaoperaciones(opera).valores.count 
          loop
            -- Construimos los campos y valores del update
            --Sacamos el tipo del campo del item i
            queryTiposCampos:=replace(opTiposCampos,':column',operaciones.listaoperaciones(opera).valores(i).clave);
            execute immediate queryTiposCampos into tipo;
            if i=1 then
              if tipo='DATE' then
                valores:=operaciones.listaoperaciones(opera).valores(i).clave||'=TO_DATE(TRIM('''||operaciones.listaoperaciones(opera).valores(i).valor||'''),''DD/MM/YYYY'')';
              else
                if tipo='NUMBER' then
                  valores:=operaciones.listaoperaciones(opera).valores(i).clave||'='||operaciones.listaoperaciones(opera).valores(i).valor;
                else
                  valores:=operaciones.listaoperaciones(opera).valores(i).clave||'=TRIM('''||operaciones.listaoperaciones(opera).valores(i).valor||''')';
                end if;
              end if;
            else
              if tipo='DATE' then
                valores:=valores||','||operaciones.listaoperaciones(opera).valores(i).clave||'=TO_DATE(TRIM('''||operaciones.listaoperaciones(opera).valores(i).valor||'''),''DD/MM/YYYY'')';
              else
                if tipo='NUMBER' then
                  valores:=valores||','||operaciones.listaoperaciones(opera).valores(i).clave||'='||operaciones.listaoperaciones(opera).valores(i).valor;
                else
                  valores:=valores||','||operaciones.listaoperaciones(opera).valores(i).clave||'=TRIM('''||operaciones.listaoperaciones(opera).valores(i).valor||''')';
                end if;
              end if;
            end if;
          end loop; 
          -- ESTABLECEMOS NOMBRES DE COLUMNAS Y VALORES
          laSql:=replace(laSql,':valoresUpdate',valores);
          laSql:=replace(laSql,':idRow',operaciones.listaoperaciones(opera).id);
          
        elsif operaciones.listaoperaciones(opera).operacion = 'DELETE' then
          laSql:=opDelete;
          -- ESTABLECEMOS NOMBRES DE COLUMNAS Y VALORES
          laSql:=replace(laSql,':tabla',operaciones.listaoperaciones(opera).tabla);
          laSql:=replace(laSql,':idRow',operaciones.listaoperaciones(opera).id);
          
        end if;
        
        mensaje:=laSql;
        execute immediate 'BEGIN '||laSql||' END;';
        mensaje:='Operación realizada correctamente';
        estado:=200;

    
    end loop;
    end;
     COMMIT;
      estado:=200; 
      mensaje:='Operación realizada correctamente'; 
      EXCEPTION
              WHEN OTHERS THEN
                  ROLLBACK;
                  estado:=500;
                  mensaje:= mensaje || '<<LASQL>> ' ||'Error: '|| TO_CHAR(SQLCODE)|| SQLERRM ;



end rda_srv_Edicion;


END CCR_PACKAGE;
